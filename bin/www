#!/usr/bin/env node

/**
 * Module dependencies.
 */
const WebSocket = require('ws');
var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const library = require("../public/javascripts/library");
const { type } = require('os');
const { json } = require('express');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
let map = new Map();
var server = http.createServer(app);
let wws = new WebSocket.Server({ server });
wws.on('connection', (ws) => {
  ws.on('message', (data) => {
    data = JSON.parse(data);
    switch (data[0]) {
      case "open":
        map.set(data[1], ws);
        HowManyUsersOnline(map);
        break;
      case "close":
        map.delete(data[1]);
        HowManyUsersOnline(map);
        break;
      case "message":
        try {
          let userws = map.get(data[2]);
          // 1 3 4 == name message img
          userws.send(JSON.stringify([data[1], data[3]], data[4]));
        } catch (err) {
          console.log(err);
        }
        break;
      default:
        break;
    }
  });

})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function HowManyUsersOnline(map) {
  map.forEach((value, index) => {
    value.send(JSON.stringify(["online person :" , map.size]));
  });
}